/*
 * Copyright (C) 2024-2025 OpenAni and contributors.
 *
 * 此源代码的使用受 GNU AFFERO GENERAL PUBLIC LICENSE version 3 许可证的约束, 可以在以下链接找到该许可证.
 * Use of this source code is governed by the GNU AGPLv3 license, which can be found at the following link.
 *
 * https://github.com/open-ani/ani/blob/main/LICENSE
 */

// @formatter:off
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package me.him188.ani.client.apis

import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import me.him188.ani.client.infrastructure.ApiClient
import me.him188.ani.client.infrastructure.HttpResponse
import me.him188.ani.client.infrastructure.RequestConfig
import me.him188.ani.client.infrastructure.RequestMethod
import me.him188.ani.client.infrastructure.wrap
import me.him188.ani.client.models.AniAuthenticationResponse
import me.him188.ani.client.models.AniListSyncCommandsSortBy
import me.him188.ani.client.models.AniLoginResponse
import me.him188.ani.client.models.AniLoginWithRefreshTokenRequest
import me.him188.ani.client.models.AniOAuthRedirectResponse
import me.him188.ani.client.models.AniPaginatedResponse1

open class BangumiAniApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 绑定 Bangumi 账号
     * 绑定 Bangumi 账号
     * @param requestId 
     * @param os 
     * @param arch 
     * @return AniOAuthRedirectResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun bind(requestId: kotlin.String, os: kotlin.String, arch: kotlin.String): HttpResponse<AniOAuthRedirectResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestId?.apply { localVariableQuery["requestId"] = listOf("$requestId") }
        os?.apply { localVariableQuery["os"] = listOf("$os") }
        arch?.apply { localVariableQuery["arch"] = listOf("$arch") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/users/bangumi/bind",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 执行队列中的命令
     * 执行队列中的命令
     * @return kotlin.Any
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun executeSyncCommands(): HttpResponse<kotlin.Any> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/bangumi/sync",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取登录结果
     * 获取登录结果
     * @param requestId 
     * @return AniLoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getToken(requestId: kotlin.String): HttpResponse<AniLoginResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestId?.apply { localVariableQuery["requestId"] = listOf("$requestId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/users/bangumi/result",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 获取队列中的 Bangumi 同步命令
     * 获取队列中的 Bangumi 同步命令
     * @param offset  (optional)
     * @param limit  (optional)
     * @param sortBy  (optional)
     * @return AniPaginatedResponse1
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listSyncCommands(offset: kotlin.Int? = null, limit: kotlin.Int? = null, sortBy: AniListSyncCommandsSortBy? = null): HttpResponse<AniPaginatedResponse1> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        sortBy?.apply { localVariableQuery["sortBy"] = listOf("${ sortBy.value }") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/bangumi/sync/commands",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 使用已有的 Bangumi refresh token 绑定账号
     * 使用已有的 Bangumi refresh token 绑定账号
     * @param aniLoginWithRefreshTokenRequest 
     * @return AniAuthenticationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun loginWithRefreshToken(aniLoginWithRefreshTokenRequest: AniLoginWithRefreshTokenRequest): HttpResponse<AniAuthenticationResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = aniLoginWithRefreshTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/users/bangumi/loginWithRefreshToken",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 获取 Bangumi OAuth 授权链接
     * 获取 Bangumi OAuth 授权链接
     * @param requestId 
     * @param os 
     * @param arch 
     * @return AniOAuthRedirectResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oauth(requestId: kotlin.String, os: kotlin.String, arch: kotlin.String): HttpResponse<AniOAuthRedirectResponse> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        requestId?.apply { localVariableQuery["requestId"] = listOf("$requestId") }
        os?.apply { localVariableQuery["os"] = listOf("$os") }
        arch?.apply { localVariableQuery["arch"] = listOf("$arch") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/users/bangumi/oauth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Bangumi OAuth 回调
     * Bangumi OAuth 回调
     * @param code 
     * @param state 
     * @return void
     */
    open suspend fun oauthCallback(code: kotlin.String, state: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("auth-jwt")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        code?.apply { localVariableQuery["code"] = listOf("$code") }
        state?.apply { localVariableQuery["state"] = listOf("$state") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/users/bangumi/oauth/callback",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}

// @formatter:on
